using iTextSharp.text;
using iTextSharp.text.pdf;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TPlmSign.helper
{
     public class WatermarkHelper
    {


        public string InsertWaterMark(string Filepath, string flag, Hashtable WaterMark, string MarkValue) 
        {
            string errormsg = string.Empty;
            try 
            {
                switch (flag)
                {
                    case "IMG":
                        errormsg = InsertWaterMarkImageOrText(Filepath,"IMG",WaterMark, MarkValue);
                        break;
                    case "TEXT":
                        #region  直接插入图片或文字
                        errormsg = InsertWaterMarkImageOrText(Filepath, "TEXT", WaterMark, MarkValue);
                        #endregion
                        break;
                    case "IMG2":
                        #region  文字转图片插入水印
                        string WaterMarkPath = string.Empty;
                        errormsg = DrawWaterMark(Filepath, WaterMark, MarkValue, out WaterMarkPath);
                        if (string.IsNullOrEmpty(errormsg))
                        {
                            errormsg = InsertWaterMarkImageOrText(Filepath, "IMG", WaterMark, WaterMarkPath);
                        }
                        #endregion
                        break;
                }
            }
            catch (Exception ex)
            {
                errormsg = ex.Message;
                return errormsg;
            }
            return errormsg;
        }




       /// <summary>
       /// 插入水印的方法
       /// </summary>
       /// <param name="Filepath">pdf路径</param>
       /// <param name="flag">标志：image/text/image2</param>
       /// <param name="WaterMark">水印样式</param>
       /// <param name="MarkValue">需要加的水印内容</param>
       /// <param name="aOutFile">加完水印之后的路径</param>
       /// <returns></returns>
        private string InsertWaterMarkImageOrText(string Filepath,string flag, Hashtable WaterMark, string MarkValue)
        {
            string errormsg = string.Empty;
            PdfReader pdfReader = null;
            PdfStamper pdfStamper = null;
            FileSignHelper FileSign = new FileSignHelper();
            string aTempFile = string.Empty;
            try
            {
                pdfReader = new PdfReader(Filepath);
                int numberOfPages = pdfReader.NumberOfPages;
                aTempFile = Path.Combine(Path.GetTempPath()+ Path.GetFileNameWithoutExtension(Filepath) + DateTime.Now.ToString("_yyyyMMddHHmmss") + "_mark.pdf");
                pdfStamper = new PdfStamper(pdfReader, new FileStream(aTempFile, FileMode.Create));
                PdfContentByte content = null;
                iTextSharp.text.Image image = null;
                PdfGState gs = new PdfGState();               
                for (int i = 1; i <= numberOfPages; i++)
                {
                    //string size = WaterMark["SIZE"].ToString();  //图幅
                    string MarkLevel = WaterMark["MARKLEVEL"].ToString(); //水印位置
                    float Rate = Convert.ToSingle(WaterMark["IMAGERATE"]); //水印图片倍率
                    float left = Convert.ToSingle(WaterMark["LEFT"]);//以左下角为原点，图片水印X坐标，ALIGN为空或N，启用坐标定位
                    float bottom = Convert.ToSingle(WaterMark["BOTTOM"]); //y坐标
                    string style = WaterMark["STYLE"].ToString(); //水印样式
                    //水印位置
                    if (string.IsNullOrEmpty(MarkLevel) || MarkLevel == "0")
                    {
                        content = pdfStamper.GetUnderContent(i);//内容下层加水印
                    }
                    else
                    {
                        content = pdfStamper.GetOverContent(i);//内容上层加水印
                    }
                    iTextSharp.text.Rectangle psize = pdfReader.GetPageSize(i);
                    float width = psize.Width;
                    float height = psize.Height;
                    string size = GetSize(width, height); //获取图幅
                    try
                    {
                        switch (flag)
                        {
                            case "IMG":
                                List<float[]> XYList = new List<float[]>();
                                if (System.IO.File.Exists(MarkValue))
                                {
                                    #region 如果是图片
                                    //如果 是emf和wmf图片
                                    if (MarkValue.ToLower().EndsWith(".emf") || MarkValue.ToLower().EndsWith(".wmf"))
                                    {
                                        byte[] bt = ConvertEmfToWmf(MarkValue);
                                        image = iTextSharp.text.Image.GetInstance(bt);
                                    }
                                    else
                                    {
                                        image = iTextSharp.text.Image.GetInstance(MarkValue);
                                    }
                                    //插入图片水印                                                    
                                    gs.FillOpacity = Convert.ToSingle(WaterMark["TRANSPARENT"]);
                                    content.SetGState(gs);
                                    //使用自定义配置设置透明度
                                    image.GrayFill = Convert.ToSingle(WaterMark["TRANSPARENT"]);//透明度，灰色填充
                                    if (style == "2")//背景水印
                                    {
                                        image.RotationDegrees = 45f;
                                        float iw = psize.Width * 0.8f;
                                        float ih = psize.Height * 0.8f;
                                        //重置图片大小
                                        //image.ScaleToFit(iw, ih);
                                        //强制按iw、ih缩放
                                        image.ScaleAbsolute(iw, ih);
                                        image.SetAbsolutePosition((psize.Width - iw) / 2f, (psize.Height - ih) / 2f);
                                        content.AddImage(image);
                                    }
                                    else if (style == "1")//普通水印
                                    {
                                        float iw = (float)(image.Width * Rate);
                                        float ih = (float)(image.Height * Rate);
                                        //强制按iw、ih缩放
                                        image.ScaleAbsolute(iw, ih);
                                        //如果配置中定义了大于等于0的X和Y坐标，则将水印坐标设置为配置定义的坐标
                                        //使用自定义配置设置旋转角度
                                        image.RotationDegrees = Convert.ToSingle(WaterMark["ROTATE"]);
                                        XYList = GetXY(Convert.ToInt32(WaterMark["ROW"]), Convert.ToInt32(WaterMark["COL"]), psize.Width, psize.Height, iw, ih, left, bottom, WaterMark["ALIGN"].ToString(), size);
                                        foreach (float[] xy in XYList)
                                        {
                                            image.SetAbsolutePosition(xy[0], xy[1]);
                                            content.AddImage(image);
                                        }
                                    }
                                    #endregion
                                }
                                else
                                {
                                    errormsg = "插入水印失败:水印路径【" + MarkValue + "】不存在";
                                }
                                break;
                            case "TEXT":
                                #region 如果是文字
                                //设置字体 
                                BaseFont bf = BaseFont.CreateFont(@"C:\WINDOWS\Fonts\simfang_0.ttf", BaseFont.IDENTITY_H, BaseFont.EMBEDDED); //获取系统字体 宋体
                                float rate = Rate > 0 ? Rate : 0f;
                                //设置字体及字号 
                                float fontsize = width * rate;
                                //设置字体颜色
                                content.BeginText();
                                if (WaterMark.ContainsKey("FONTCOLOR"))
                                {
                                    BaseColor color = new BaseColor(FileSign.GetFontRGBColor(WaterMark["FONTCOLOR"].ToString()));
                                    content.SetColorFill(color);//BaseColor.LIGHT_GRAY);
                                }
                                 float[] xy0 = GetXY(size, left, bottom, width, height, ref fontsize, WaterMark["ALIGN"].ToString());
                                ////如果配置中定义了大于等于0的X和Y坐标，则将水印坐标设置为配置定义的坐标
                                if (left >= 0 && bottom >= 0)
                                {
                                    xy0[0] = left;
                                    xy0[1] = bottom;
                                }
                                if (style == "2")//内置背景水印，通过调整配置可以达到同样的效果
                                {
                                    gs.FillOpacity = 0.3f;
                                    content.SetGState(gs);
                                    //开始写入文本
                                    content.SetFontAndSize(bf, 100);
                                    content.SetTextMatrix(0, 0);
                                    content.ShowTextAligned(Element.ALIGN_CENTER, MarkValue, width / 2 - 50, height / 2 - 50, 55);
                                }
                                else if (style == "1")//普通文字水印
                                {
                                    //设置文本透明度
                                    gs.FillOpacity = Convert.ToSingle(WaterMark["TRANSPARENT"]);
                                    content.SetGState(gs);
                                    //开始   
                                    //content.BeginText();
                                    //设置颜色   
                                    //content.SetColorFill(color);
                                    content.SetFontAndSize(bf, fontsize);
                                    //设置起始位置   
                                    content.SetTextMatrix(0, 0);
                                    //使用ALIGN_CENTER后X坐标与实际坐标不同
                                    content.ShowTextAligned((int)(Element.ALIGN_MIDDLE), MarkValue, xy0[0], xy0[1], Convert.ToSingle(WaterMark["ROTATE"]));
                                }
                                content.EndText();                              
                                #endregion
                                break;
                        }
                    }
                    catch (Exception ex)
                    {
                        errormsg += ex.Message;
                        errormsg += Environment.NewLine;
                    }                
                }              
                return errormsg;
            }
            catch (Exception ex)
            {
                 errormsg +=ex.Message.Trim();
                 return errormsg;
            }
            finally
            {
                if (pdfStamper != null)
                    pdfStamper.Close();
                if (pdfReader != null)
                    pdfReader.Close();
                if (string.IsNullOrEmpty(errormsg))
                {
                    //将加完水印的临时文件复制到原路径
                    System.IO.File.Copy(aTempFile, Filepath, true);
                    try
                    {
                        System.IO.File.Delete(aTempFile);
                    }
                    catch { }
                }
            }
        }








        /// <summary>
        /// 绘制水印图片
        /// </summary>
        /// <param name="mark">水印集合用;分开</param>
        /// <param name="rotateDegree">旋转角度，支持逆时针60度以下旋转(-60~0)</param>
        /// <param name="fontName">字体名称</param>
        /// <param name="fontSize">字体大小</param>
        /// <param name="isBold">加粗</param>
        /// <param name="isItaly">斜体</param>
        /// <param name="isEmf">是否绘制EMF图片</param>
        /// <param name="markColor">水印颜色</param>
        /// <param name="strRectRadius">圆角矩形弯曲值</param>
        /// <param name="saveFileName">生成的水印路径</param>
        /// <returns></returns>
         private static string DrawWaterMark(string Filepath, Hashtable WaterMark, string MarkValue, out string saveFileName)
          {
            string errormsg = string.Empty;
            saveFileName = string.Empty;   
            try
            {
                //设置工作目录                           
                string WorkingDirectory = System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory ,"watermark_temp");
                if (!System.IO.Directory.Exists(WorkingDirectory))
                {
                    System.IO.Directory.CreateDirectory(WorkingDirectory);
                }
                saveFileName = System.IO.Path.Combine(WorkingDirectory, "watermark_photo" + DateTime.Now.ToString("yyyyMMddhhmmss") + ".png");
                string[] colorList = new string[0]; string[] font = new string[0];
                System.Drawing.Brush redBrush = new SolidBrush(System.Drawing.Color.Red); //初始化字体颜色;      
                if (WaterMark.ContainsKey("MARK_COLOR"))
                {
                    colorList = WaterMark["MARK_COLOR"].ToString().Split(new char[] { ';' }, StringSplitOptions.None);
                }          
                string[] marklist = MarkValue.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                System.Drawing.Font ft = new System.Drawing.Font("宋体",19); //初始化样式
                if (WaterMark.ContainsKey("FONT"))
                {
                    font = WaterMark["FONT"].ToString().Split(';'); //字体格式
                    FontStyle fs = new FontStyle();
                    if (int.Parse(font[2]) == 1) //斜体
                    {
                        fs = fs | FontStyle.Italic;
                    }
                    if (int.Parse(font[2]) == 1)//是否加粗
                    {
                        fs = fs | FontStyle.Bold;
                    }
                    ft = new System.Drawing.Font(font[0], Convert.ToSingle(font[1]), fs);
                }
                int  rotateDegree = int.Parse(WaterMark["ROTATE"].ToString());
                int itemH = 60;
                int itemW = 138;//19 fontsize          
              
                int StartX = 2;
                int StartY = 5;
                int imgWidth = itemW + 6;
                int imgHeight = itemH * marklist.Length + marklist.Length * 10;
                if (rotateDegree < 0 && rotateDegree >= -60)
                {
                    int drawZoneHeight = marklist.Length * itemH + marklist.Length * 10;
                    int drawZoneWidth = itemW + 10;
                    imgWidth = Convert.ToInt32(Math.Abs(drawZoneHeight * Math.Cos(Math.PI * Math.Abs(rotateDegree) / 180) + drawZoneWidth * Math.Cos(Math.PI * Math.Abs(rotateDegree) / 180)));
                    imgHeight = Convert.ToInt32(Math.Abs(drawZoneHeight * Math.Cos(Math.PI * Math.Abs(rotateDegree) / 180) + drawZoneWidth * Math.Sin(Math.PI * Math.Abs(rotateDegree) / 180)));
                    StartY = (imgHeight - drawZoneHeight) / 2 + 5;
                    StartX = (imgWidth - drawZoneWidth) / 2 + 5;
                }
                //绘制矢量图
                System.Drawing.Bitmap bmp = new System.Drawing.Bitmap(imgWidth, imgHeight, System.Drawing.Imaging.PixelFormat.Format32bppPArgb);
                using (System.Drawing.Graphics gs = System.Drawing.Graphics.FromImage(bmp))
                {
                    ////if (isEmf == false)
                    ////{
                        gs.Clear(System.Drawing.Color.White);
                        gs.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
                        gs.PixelOffsetMode = System.Drawing.Drawing2D.PixelOffsetMode.HighQuality;

                        if (rotateDegree < 0 && rotateDegree >= -60)
                        {
                            gs.TranslateTransform(imgWidth / 2, imgHeight / 2);
                            gs.RotateTransform(rotateDegree);
                            gs.TranslateTransform(-imgWidth / 2, -imgHeight / 2);
                        }
                        for (int i = 0; i < marklist.Length; i++)
                        {
                            //水印章支持自定义颜色 
                            using (colorList.Length > i + 1 ? new SolidBrush(GetColorByRgb(colorList[i])) : new SolidBrush(System.Drawing.Color.Red))
                            {
                                System.Drawing.RectangleF r1 = new System.Drawing.RectangleF(StartX, StartY + i * itemH + i * 10, itemW, itemH);
                                System.Drawing.Drawing2D.GraphicsPath g1 = RoundRect(r1, Convert.ToInt32(30), Convert.ToInt32(30), Convert.ToInt32(30), Convert.ToInt32(30));
                                System.Drawing.SizeF sz1 = gs.MeasureString(marklist[i], ft);
                                //水印使用统一红色
                                gs.DrawPath(new System.Drawing.Pen(redBrush, 2), g1);
                                gs.DrawString(marklist[i], ft, redBrush, (r1.Width - sz1.Width) / 2 + r1.Location.X, (r1.Height - sz1.Height) / 2 + r1.Location.Y);
                            }
                        }
                        //必须在这里设置透明，否则文字会有黑边 
                        bmp.MakeTransparent(Color.Transparent);
                        bmp.Save(saveFileName);
                    //}
                    #region  如果是要生成emf图片
                    //else
                    //{
                    //    System.Drawing.Imaging.Metafile mf = new System.Drawing.Imaging.Metafile(saveFileName, gs.GetHdc(), System.Drawing.Imaging.EmfType.EmfPlusDual);
                    //    using (System.Drawing.Graphics g = System.Drawing.Graphics.FromImage(mf))
                    //    {

                    //        g.Clear(Color.Transparent);
                    //        g.SmoothingMode = SmoothingMode.HighQuality;
                    //        g.PixelOffsetMode = PixelOffsetMode.HighQuality;
                    //        if (rotateDegree < 0 && rotateDegree >= -60)
                    //        {
                    //            g.TranslateTransform(imgWidth / 2, imgHeight / 2);
                    //            g.RotateTransform(rotateDegree);
                    //            g.TranslateTransform(-imgWidth / 2, -imgHeight / 2);
                    //        }
                    //        for (int i = 0; i < marklist.Length; i++)
                    //        {
                    //            //水印章支持自定义颜色 
                    //            using (System.Drawing.Brush redBrush = new SolidBrush(GetColorByRgb(colorList[i])))
                    //            {
                    //                System.Drawing.RectangleF r1 = new System.Drawing.RectangleF(StartX, StartY + i * itemH + i * 10, itemW, itemH);

                    //                System.Drawing.Drawing2D.GraphicsPath g1 = RoundRect(r1, Convert.ToInt32(rectRadiusList[i]), Convert.ToInt32(rectRadiusList[i]), Convert.ToInt32(rectRadiusList[i]), Convert.ToInt32(rectRadiusList[i]));
                    //                SizeF sz1 = g.MeasureString(marklist[i], ft);
                    //                g.DrawPath(new Pen(redBrush, 2), g1);
                    //                g.DrawString(marklist[i], ft, redBrush, (r1.Width - sz1.Width) / 2 + r1.Location.X, (r1.Height - sz1.Height) / 2 + r1.Location.Y);
                    //            }
                    //        }
                    //        g.Save();
                    //        g.Dispose();
                    //        mf.Dispose();
                    //    }
                    //}
                    #endregion
                }
                if (!System.IO.File.Exists(saveFileName))
                {
                    errormsg = "生成水印图片出错!";
                    return errormsg;
                }
                return errormsg;
            }
            catch (Exception ex)
            {
                errormsg ="生成水印图片出错：" + ex.Message;
                return errormsg;
            }
        }



        #region
         private int A4_SIZE = 595 + 842;
         private int A3_SIZE = 842 + 1191;
         private int A2_SIZE = 1191 + 1684;
         private int A1_SIZE = 1684 + 2384;
         private int A0_SIZE = 2384 + 3370;

         /// <summary>
         /// 根据文档页宽高获取图幅信息
         /// </summary>
         /// <param name="W"></param>
         /// <param name="H"></param>
         /// <returns></returns>
         private string GetSize(float W, float H)
         {
             if (Math.Abs(W + H - A0_SIZE) <= 10)
             {
                 return "A0";
             }
             else if (Math.Abs(W + H - A1_SIZE) <= 10)
             {
                 return "A1";
             }
             else if (Math.Abs(W + H - A2_SIZE) <= 10)
             {
                 return "A2";
             }
             else if (Math.Abs(W + H - A3_SIZE) <= 10)
             {
                 return "A3";
             }
             else if (Math.Abs(W + H - A4_SIZE) <= 10)
             {
                 return "A4";
             }
             return "";
         }

        /// <summary>
        /// 插入图片，获取图片坐标，支持重复插入
        /// </summary>
        /// <param name="row"></param>
        /// <param name="col"></param>
        /// <param name="W"></param>
        /// <param name="H"></param>
        /// <param name="imageW"></param>
        /// <param name="imageH"></param>
        /// <param name="TYPE"></param>
        /// <returns></returns>
        private List<float[]> GetXY(int row, int col, float W, float H, float imageW, float imageH, float left, float top, string TYPE, string size)
        {
            List<float[]> XYList = new List<float[]>();
            float RSIZE = W / (row + 1);
            float CSIZE = H / (col + 1);
            float x = 0f;
            float y = 0f;

            for (int i = 0; i < row; i++)
            {

                x = (i + 1) * RSIZE - imageW / 2;
                if (x < 0)
                {
                    x = left;
                }
                for (int j = 0; j < col; j++)
                {
                    y = (j + 1) * CSIZE - imageH / 2;
                    if (y < 0)
                    {
                        y = top;
                    }
                    float[] xy = new float[2] { x, y };
                    XYList.Add(xy);
                }
            }
            //获取新的起始点坐标
            float xNew = 0, yNew = 0;
            if (TYPE.Length == 2)
            {
                xNew = GetNewLocation(left, W, TYPE.Substring(0, 1), size);
                yNew = GetNewLocation(top, H, TYPE.Substring(1, 1), size);
            }
            else
            {
                xNew = GetNewLocation(left, W, TYPE, size);
                yNew = GetNewLocation(top, H, TYPE, size);
            }
            if (XYList.Count == 1)
            {
                XYList[0][0] = xNew;
                XYList[0][1] = yNew;
            }
            else
            {
                //获取水印区域大小
                float offsetW = (XYList[XYList.Count - 1][0] - XYList[0][0] + imageW) / 2f;
                float offsetH = (XYList[XYList.Count - 1][1] - XYList[0][1] + imageH) / 2f;

                float x0 = xNew - offsetW;
                float y0 = yNew - offsetH;
                for (int i = 0; i < XYList.Count; i++)
                {

                    XYList[i][0] = XYList[i][0] + (xNew - x0) - offsetW;
                    XYList[i][1] = XYList[i][1] + (yNew - y0) - offsetH;
                   // XYList[i][0] = XYList[i][0] + (xNew - XYList[0][0]) - offsetW;
                    //XYList[i][1] = XYList[i][1] + (yNew - XYList[0][1]) - offsetH;
                }
            }
            return XYList;
        }

        /// <summary>
        /// 获取插入文字水印坐标
        /// </summary>
        /// <param name="size"></param>
        /// <param name="W"></param>
        /// <param name="H"></param>
        /// <param name="fontsize"></param>
        /// <returns></returns>
        private float[] GetXY(string size, float left, float top, float W, float H, ref float fontsize, string type)
        {
            float x = 0, y = 0;
            if (type.Length == 2)
            {
                x = GetNewLocation(left, W, type.Substring(0, 1), size);
                y = GetNewLocation(top, H, type.Substring(1, 1), size);
            }
            else
            {
                x = GetNewLocation(left, W, type, size);
                y = GetNewLocation(top, H, type, size);
            }
            switch (size.ToUpper())
            {
                case "A0":
                    fontsize = (float)0.008 * W;
                    break;
                case "A1":
                    fontsize = (float)0.012 * W;
                    break;
                case "A2":
                    fontsize = (float)0.016 * W;
                    break;
                case "A3":
                    fontsize = (float)0.02 * W;
                    break;
                case "A4":
                default:
                    fontsize = (float)0.025 * W;
                    break;
            }
            return new float[] { x, y };
        }
        /// <summary>
        /// 对坐标进行处理
        /// </summary>
        /// <param name="loc">坐标值</param>
        /// <param name="max">最大坐标值，页码宽度或高度</param>
        /// <param name="type">位置类型</param>
        /// <returns></returns>
        private float GetNewLocation(float loc, float max, string type, string size)
        {
            if (type == "N" || string.IsNullOrEmpty(type) || type.Trim().Length == 0)
            {
                if (loc >= 0)
                {
                    return loc;
                }
                else
                {
                    return max - Math.Abs(loc);
                }
            }
            else
            {
                if (type == "L" || type == "B")
                {
                    float newLoc = loc;
                    switch (size.ToUpper())
                    {
                        case "A0":
                            newLoc = (float)0.0138 * max;
                            break;
                        case "A1":
                            newLoc = (float)0.0203 * max;
                            break;
                        case "A2":
                            newLoc = (float)0.028 * max;
                            break;
                        case "A3":
                            newLoc = (float)0.025 * max;
                            break;
                        case "A4":
                        default:
                            newLoc = (float)0.025 * max;
                            break;
                    }
                    return newLoc;
                }
                else if (type == "R" || type == "T")
                {
                    float newLoc = loc;
                    switch (size.ToUpper())
                    {
                        case "A0":
                            newLoc = (float)0.938 * max;
                            break;
                        case "A1":
                            newLoc = (float)0.9115 * max;
                            break;
                        case "A2":
                            newLoc = (float)0.875 * max;
                            break;
                        case "A3":
                            newLoc = (float)0.83 * max;
                            break;
                        case "A4":
                            newLoc = (float)0.8 * max;
                            break;
                        default:
                            newLoc = (float)0.8 * max;
                            break;
                    }
                    return newLoc;
                }
                else if (type == "M")
                {
                    return (float)0.5 * max;
                }
                else
                {
                    if (loc >= 0)
                    {
                        return loc;
                    }
                    else
                    {
                        return max - Math.Abs(loc);
                    }
                }
            }
        }


        [System.Runtime.InteropServices.DllImport("gdiplus.dll", SetLastError = true, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        static extern int GdipEmfToWmfBits(int hEmf, int uBufferSize, byte[] bBuffer, int iMappingMode, EmfToWmfBitsFlags flags);
        private static byte[] ConvertEmfToWmf(string filePath)
        {
            const int MM_ANISOTROPIC = 8;
            System.Drawing.Imaging.Metafile mf = new System.Drawing.Imaging.Metafile(filePath);
            int handle = mf.GetHenhmetafile().ToInt32();
            int bufferSize = GdipEmfToWmfBits(handle, 0, null, MM_ANISOTROPIC, EmfToWmfBitsFlags.EmfToWmfBitsFlagsIncludePlaceable);
            byte[] buf = new byte[bufferSize];
            GdipEmfToWmfBits(handle, bufferSize, buf, MM_ANISOTROPIC, EmfToWmfBitsFlags.EmfToWmfBitsFlagsIncludePlaceable);
            return buf;
        }
        internal enum EmfToWmfBitsFlags
        {
            EmfToWmfBitsFlagsDefault = 0x00000000,
            EmfToWmfBitsFlagsEmbedEmf = 0x00000001,
            EmfToWmfBitsFlagsIncludePlaceable = 0x00000002,
            EmfToWmfBitsFlagsNoXORClip = 0x00000004
        }


        /// <summary>
        /// 字符串转RG颜色
        /// </summary>
        /// <param name="strMarkColor"></param>
        /// <returns></returns>
        private static Color GetColorByRgb(string strMarkColor)
        {
            Color drawMarkColor = Color.Red;
            if (string.IsNullOrEmpty(strMarkColor) == false)
            {
                try
                {
                    string[] rgb = strMarkColor.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                    if (rgb.Length == 3)
                    {
                        drawMarkColor = Color.FromArgb(Convert.ToInt32(rgb[0]), Convert.ToInt32(rgb[1]), Convert.ToInt32(rgb[2]));
                    }
                }
                catch { }
            }
            return drawMarkColor;
        }


        /// <summary>
        /// 画圆角矩形
        /// </summary>
        /// <param name="r"></param>
        /// <param name="r1"></param>
        /// <param name="r2"></param>
        /// <param name="r3"></param>
        /// <param name="r4"></param>
        /// <returns></returns>
        private static GraphicsPath RoundRect(RectangleF r, float r1, float r2, float r3, float r4)
        {
            float x = r.X, y = r.Y, w = r.Width - 1, h = r.Height - 1;
            GraphicsPath rr = new GraphicsPath();
            if (r1 <= 0 && r2 <= 2 && r3 <= 0 && r4 <= 0)
            {
                rr.AddRectangle(r);
            }
            else
            {
                rr.AddBezier(x, y + r1, x, y, x + r1, y, x + r1, y);
                //rr.AddLine(x + r1, y, x + w - r2, y);
                rr.AddBezier(x + w - r2, y, x + w, y, x + w, y + r2, x + w, y + r2);
                //rr.AddLine(x + w, y + r2, x + w, y + h - r3);
                rr.AddBezier(x + w, y + h - r3, x + w, y + h, x + w - r3, y + h, x + w - r3, y + h);
               // rr.AddLine(x + w - r3, y + h, x + r4, y + h);
                rr.AddBezier(x + r4, y + h, x, y + h, x, y + h - r4, x, y + h - r4);
               // rr.AddLine(x, y + h - r4, x, y + r1);
            }
            return rr;
        }
        private static GraphicsPath RoundRect(RectangleF rect, int cornerRadius)
        {
            GraphicsPath roundedRect = new GraphicsPath();
            if (cornerRadius <= 0)
            {
                roundedRect.AddRectangle(rect);
            }
            else
            {
                roundedRect.AddArc(rect.X, rect.Y, cornerRadius * 2, cornerRadius * 2, 180, 90);
                roundedRect.AddLine(rect.X + cornerRadius, rect.Y, rect.Right - cornerRadius * 2, rect.Y);
                roundedRect.AddArc(rect.X + rect.Width - cornerRadius * 2, rect.Y, cornerRadius * 2, cornerRadius * 2, 270, 90);
                roundedRect.AddLine(rect.Right, rect.Y + cornerRadius * 2, rect.Right, rect.Y + rect.Height - cornerRadius * 2);
                roundedRect.AddArc(rect.X + rect.Width - cornerRadius * 2, rect.Y + rect.Height - cornerRadius * 2, cornerRadius * 2, cornerRadius * 2, 0, 90);
                roundedRect.AddLine(rect.Right - cornerRadius * 2, rect.Bottom, rect.X + cornerRadius * 2, rect.Bottom);
                roundedRect.AddArc(rect.X, rect.Bottom - cornerRadius * 2, cornerRadius * 2, cornerRadius * 2, 90, 90);
                roundedRect.AddLine(rect.X, rect.Bottom - cornerRadius * 2, rect.X, rect.Y + cornerRadius * 2);
                roundedRect.CloseFigure();
            }
            return roundedRect;
        }
        #endregion


    }
}
